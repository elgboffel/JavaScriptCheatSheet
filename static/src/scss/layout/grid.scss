////
/// GRID
/// Date of creation: 09-06-2017
/// @group grid
/// @author Elise Bach <elise.bach@akqa.com>
/// @author Christian Brostr√∂m <christian.brostrom@akqa.com>
/// @author Anders Gissel <anders.gissel@akqa.com>
////


/// The overall structure of the grid is created here. This is considered *read-only*.
/// @example html Usage:
///   <div class="grid grid-container"></div>
.grid {
    display: flex;
    flex-flow: column;

    .row {
        display: flex;
        flex-flow: row wrap; // Makes sure the grid is aligned to the left and top
        justify-content: flex-start;
        align-items: flex-start;

        // Makes sure the grid is centered horizontally
        &--center {
            justify-content: center;
        }

        // Makes sure the grid is aligned to the right
        &--right {
            justify-content: flex-end;
        }
    }
}


/// This is the grid container.
///
/// `max-width` is set from medium-screens and up and values are taken from the `site-settings.json` file.
///
/// This section should be changed to fit your specific needs.
///
/// `#{inspect(map-get($screensizes, md))}` defines which variable from `site-settings.json` to use.
/// **ONLY change the 'md' part to fit.** (xxs, xs, sm, md, lg etc).
.grid-container {
    margin: 0 auto;
    padding: 0 $grid__padding-size;
    width: 100%;

    @include mq(md) {
        padding: 0;
        max-width: calc(#{inspect(map-get($screensizes, md))} - #{$grid__container-offset});
    }

    @include mq(lg) {
        max-width: calc(#{inspect(map-get($screensizes, lg))} - #{$grid__container-offset});
    }

    @include mq(xl) {
        max-width: calc(#{inspect(map-get($screensizes, xl))} - #{$grid__container-offset});
    }

    @include mq(xxl) {
        max-width: calc(#{inspect(map-get($screensizes, xxl))} - #{$grid__container-offset});
    }
}



// Find out which breakpoints we should be rendering for our grid. All of them, or just a subset?
$breakpointTargets: ();
@if (variable_exists(grid__breakpoints) and length($grid__breakpoints) > 0) {
    $breakpointTargets: $grid__breakpoints;
}
@else {
    $breakpointTargets: $breakpoints;
}

// Render all the grid columns, their offset helpers, and similar goodies.
@each $breakpointName, $value in $breakpointTargets {
    // If $grid__column-widths exists and has items, use only those column widths specifically.
    @if (variable_exists(grid__column-widths) and length($grid__column-widths) > 0) {
        @each $columnIndex in $grid__column-widths {
            @include buildColumn($breakpointName, $columnIndex);
        }
    }

    // If $grid__column-widths does not exist, or has no values, just render ALL the widths.
    @else {
        @for $i from 1 through $grid__columns {
            @include buildColumn($breakpointName, $i);
        }
    }
}


/* The grid can be extended with alignment classes etc -
    but for now it is considered a barebone, easy implementation for quick use.
*/
